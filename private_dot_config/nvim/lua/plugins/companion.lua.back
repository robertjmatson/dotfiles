return {
  {
    "olimorris/codecompanion.nvim",
    config = true,
    dependencies = {
      "nvim-lua/plenary.nvim",
      "nvim-treesitter/nvim-treesitter",
      --{
      --  "saghen/blink.cmp",
      --  opts = {
      --    sources = {
      --      default = { "codecompanion" },
      --      providers = {
      --        codecompanion = {
      --          name = "CodeCompanion",
      --          module = "codecompanion.providers.completion.blink",
      --          enabled = true,
      --        },
      --      },
      --    },
      --  },
      --},
    },
    opts = {
      lob_level = "ERROR",
      display = {
        chat = {
          intro_message = "Welcome to CodeCompanion ✨! Press ? for options",
          show_header_separator = false, -- Show header separators in the chat buffer? Set this to false if you're using an external markdown formatting plugin
          separator = "─", -- The separator between the different messages in the chat buffer
          show_references = true, -- Show references (from slash commands and variables) in the chat buffer?
          show_settings = false, -- Show LLM settings at the top of the chat buffer?
          show_token_count = true, -- Show the token count for each response?
          start_in_insert_mode = false, -- Open the chat buffer in insert mode?
        },
        --inline = {
        --  layout = "vertical",
        --},
        --diff = {
        --  enabled = true,
        --  close_chat_at = 240, -- Close an open chat buffer if the total columns of your display are less than...
        --  layout = "vertical", -- vertical|horizontal split for default provider
        --  opts = { "internal", "filler", "closeoff", "algorithm:patience", "followwrap", "linematch:120" },
        --  provider = "default", -- default|mini_diff
        --},
        action_palette = {
          width = 95,
          height = 10,
          prompt = "Prompt ",
          provider = "default",
          opts = {
            show_default_actions = false,
            show_default_prompt_library = false,
          },
        },
      },
      strategies = {
        chat = {
          roles = {
            ---The header name for the LLM's messages
            ---@type string|fun(adapter: CodeCompanion.Adapter): string
            llm = function(adapter)
              return "CodeCompanion (" .. adapter.formatted_name .. ")"
            end,

            ---The header name for your messages
            ---@type string
            user = "Me",
          },
          keymaps = {
            send = {
              modes = { n = "<C-s>", i = "<C-s>" },
            },
            close = {
              modes = { n = "<C-c>", i = "<C-c>" },
            },
          },
          adapter = "llama31",
        },
        --inline = {
        --  keymaps = {
        --    accept_change = {
        --      nodes = { n = "ga" },
        --      description = "Accept the suggested change",
        --    },
        --    reject_change = {
        --      nodes = { n = "gr" },
        --      desciption = "Reject the suggested change",
        --    },
        --  },
        --  adapter = "llama31",
        --},
      },
      adapters = {
        llama31 = function()
          return require("codecompanion.adapters").extend("ollama", {
            name = "llama31",
            env = {
              url = "http://192.168.49.27:11434",
            },
            headers = {
              ["Content-Type"] = "application/json",
            },
            parameters = {
              sync = true,
            },
            schema = {
              model = {
                default = "llama3.1",
              },
              num_ctx = {
                defaults = 16384,
              },
              num_predect = {
                default = -1,
              },
            },
          })
        end,
      },
    },
    keys = {
      { "<leader>cpc", vim.cmd.CodeCompanionChat, mode = { "n", "v" }, desc = "Open Chat" },
      --{ "<leader>cpa", vim.cmd.CodeCompanionAction, mode = { "n", "v" }, desc = "Open Actions" },
    },
  },
  --{
  --  "saghen/blink.cmp",
  --  optional = true,
  --  opts = {
  --    sources = {
  --      per_filetype = {
  --        codecompanion = { "codecompanion" },
  --      },
  --    },
  --  },
  --},
}
